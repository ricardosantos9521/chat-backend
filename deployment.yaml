apiVersion: apps/v1
kind: Deployment
metadata:
  name: chattestserver-dpl
spec:
  replicas: 1
  revisionHistoryLimit: 3
  strategy:
    rollingUpdate:
      maxUnavailable: 50%
      maxSurge: 2
  selector:
    matchLabels:
      app: chattestserver
  template:
    metadata:
       labels:
         app: chattestserver
    spec:
      containers:
      - name: chattestserver
        image: "registry.gitlab.com/ricardosantos9521/github/chattest.server:BUILDNUMBER"
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        env:
        - name: "ASPNETCORE_ENVIRONMENT"
          value: "Kubernetes"
        - name: "REDIS_CONFIG"
          value: redis-chattestserver-svc.default.svc.cluster.local
        resources:
          limits:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
             path: /api/readiness/
             port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
      imagePullSecrets:
      - name: secretteamrics
---
apiVersion: v1
kind: Service
metadata:
  name: chattestserver-svc
spec:
  selector:
    app: chattestserver
  ports:
  - port: 80
    nodePort: 30200
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: chattestserver-ing
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/ingress.allow-http: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/session-cookie-name: "route_socket"
    nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
spec:
  rules:
  - http:
      paths:
      - path: /chat/server/(.*)
        backend:
          serviceName: chattestserver-svc
          servicePort: 80