trigger:
  branches:
    include:
      - master
      - dev/*
  paths:
    exclude:
      - README.md

variables:
  poolDeployName: HomeServers
  imageName: registry.gitlab.com/ricardosantos9521/chat/backend
  buildId:  $(Build.BuildNumber)
  dockerRegistryEndpoint: "GitLab Registry"

stages:
- stage: Build
  jobs:
  - job: BuildJob
    pool: $(poolDeployName)
    steps:
    - task: Docker@1
      inputs:
        command: "Build an image"
        imageName: $(imageName):$(buildId)
        dockerFile: Dockerfile
        arguments: |
          --build-arg buildnumber=$(Build.BuildNumber)
        includeLatestTag: true
    - task: Docker@1
      inputs:
        command: "Push an image"
        imageName: $(imageName):$(buildId)
        containerregistrytype: "Container Registry"
        dockerRegistryEndpoint: $(dockerRegistryEndpoint)
    - task: Docker@1
      inputs:
        command: "Push an image"
        imageName: $(imageName):latest
        containerregistrytype: "Container Registry"
        dockerRegistryEndpoint: $(dockerRegistryEndpoint)
    - task: kasunkodagoda.regex-match-replace.regex-match-replace.RegExMatchReplace@2
      displayName: "RegEx Match & Replace"
      inputs:
        PathToFile: "deployment.yaml"
        RegEx: BUILDNUMBER
        ValueToReplace: "$(Build.BuildNumber)"
    - task: CopyFiles@2
      displayName: "Copy Kubernetes (yaml) to artifacts"
      inputs:
        contents: "*.yaml"
        overWrite: true
        targetFolder: $(Pipeline.Workspace)/artifacts
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/artifacts'
        artifact: pipeline

- stage: Deploy
  dependsOn: Build
  condition: |
    and(
      succeeded('Build'),
      eq(variables['Build.SourceBranch'], 'refs/heads/master'),
      ne(variables['Build.Reason'], 'PullRequest')
    )
  jobs:
  - deployment: DeployJob
    environment: "chat-backend deploy"
    pool: $(poolDeployName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Kubernetes@1
            displayName: "Create namespace if don't exist"
            inputs:
              connectionType: "None"
              command: "apply"
              useConfigurationFile: true
              configuration: "$(Pipeline.Workspace)/pipeline/namespace.yaml"
          - task: Kubernetes@1
            displayName: "Apply Redis"
            inputs:
              connectionType: None
              command: apply
              useConfigurationFile: true
              configuration: "$(Pipeline.Workspace)/pipeline/redis.yaml"
              secretType: "dockerRegistry"
              containerRegistryType: "Container Registry"
              dockerRegistryEndpoint: $(dockerRegistryEndpoint)
              secretName: secretteamrics
          - task: Kubernetes@1
            displayName: "Apply changes"
            inputs:
              connectionType: None
              command: apply
              useConfigurationFile: true
              configuration: "$(Pipeline.Workspace)/pipeline/deployment.yaml"
              secretType: "dockerRegistry"
              containerRegistryType: "Container Registry"
              dockerRegistryEndpoint: $(dockerRegistryEndpoint)
              secretName: "gitlabdockersecret"
              namespace: chat
